name: "List changed features"
description: "Get a json list the changed features (accounting for generator changes)"
inputs:
  path:
    description: "Base feature folder (containing src and test folders)"
    type: string
    required: true

  max_bins:
    description: "max number of items in the exported json list. afters which the vvalues are getting binned using comma seperation"
    type: integer
    required: true
    default: 256

outputs:
  changed_features: # id of output
    description: "A JSON formatted list of all changed features"
    value: ${{ steps.feature-finder.outputs.changed_features }}

  all_features: # id of output
    description: "A JSON formatted list of all features"
    value: ${{ steps.feature-finder.outputs.all_features }}

  all_generated_features: # id of output
    description: "A JSON formatted list of all generated features"
    value: ${{ steps.feature-finder.outputs.all_generated_features }}

runs:
  using: "composite"
  steps:
    - run: sudo apt update && sudo apt install tree jq -y
      shell: bash

    - uses: dorny/paths-filter@v2
      id: filter
      with:
        list-files: json
        filters: |
          src: 
            - src/**/*.sh
          test: 
            - test/**/*.sh

    - id: feature-finder
      shell: bash
      run: |
        echo '${{ steps.filter.outputs.changes }}'
        ls -lh
        # prepare all features
        all_features=$(sudo tree -J -d  ./src | sudo jq -c '.[0].contents | map(.name)')

        # prepare changed features
        cd ${{ inputs.path }}
        echo '${{ steps.filter.outputs.src_files }}' > src_files.json
        echo '${{ steps.filter.outputs.test_files }}' > test_files.json
        cat src_files.json |  jq --raw-output | awk -F'/' '{print $2}' | jq -R -s -c 'split("\n")' | jq -c 'map(select(length > 0))' > changed_src_features.json
        cat test_files.json |  jq --raw-output | awk -F'/' '{print $2}' | jq -R -s -c 'split("\n")' | jq -c 'map(select(length > 0))' > changed_test_features.json
        jq -sc '.[0] + .[1] | unique'  changed_src_features.json changed_test_features.json > changed_features.json
        changed_features=$(cat changed_features.json)

        # binning
        echo hi!!!
        ls -lh
        echo "all_features=$all_features" >> $GITHUB_OUTPUT
        echo "changed_features=$changed_features" >> $GITHUB_OUTPUT

        cat > bin_cycle.py << EOF
        import sys
        from itertools import cycle
        from typing import List, Any
        import fileinput
        import json


        def cycle_baskets(items: List[Any], maxbaskets: int) -> List[List[Any]]:
            baskets = [[] for _ in range(min(maxbaskets, len(items)))]
            for item, basket in zip(items, cycle(baskets)):
                basket.append(item)
            return baskets

        std_input = list(fileinput.input())

        binned = cycle_baskets(json.loads(std_input), 10)

        sys.stdout.write(json.dumps(binned))
        EOF
        ls -lh


        # binned_all_features=$(echo $all_features | python3 bin_cycle.py)
        # binned_changed_features=$(echo $changed_features | python3 bin_cycle.py)
      

